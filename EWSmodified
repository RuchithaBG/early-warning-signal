# Early Warning Signal with sex assignment at birth

import numpy as np
import random as ran
import statistics
import matplotlib.pyplot as plt

# Each generation
def Egg2Fecund(num_eggs, larval_food, adult_nutrition, hatchability,
               critical_mass, sex_ratio, x5, SenDen, SenSize):
    eggs = [1 if ran.random() > sex_ratio else 0 for i in range(num_eggs)]
    num_larvae = int(round(hatchability *num_eggs))
    larvae = ran.sample(eggs, num_larvae)
    x1 = 4.2
    x2 = 1
    x3 = 0.009
    if num_larvae != 0:
        MeanLarvaeSize = x1 *(1 -(1.0 /(x2 +np.exp(-x3 *num_larvae
                         /larval_food))))
    else:
        MeanLarvaeSize = 0
    sd = 0.31  # Standard deviation of LarvaeSize
    LarvaeSize = np.random.normal(MeanLarvaeSize, sd, num_larvae)
    x4 = 1
    AdultSize = [x4 *x for x in LarvaeSize if x > critical_mass]
    num_adults = len(AdultSize)
    adults = ran.sample(larvae, num_adults)
    if num_adults != 0:
        MeanAdultSize = statistics.mean(AdultSize)
    else:
        MeanAdultSize = 0
    #x5 = 85
    x6 = 2
    SizeDepFecundity = adult_nutrition *x5 *np.log(x6 +SenSize
                       *np.array(AdultSize))
    DenDepFecundity = 1 /(1 +SenDen *num_adults)
    Fecundity = SizeDepFecundity *DenDepFecundity
    for i in range(num_adults):
        if adults[i] == 0:
            Fecundity[i] = 0
    Fecundity = list(Fecundity)
    return (Fecundity, num_larvae, MeanLarvaeSize, MeanAdultSize)

# Generating timeseries
def timeseries(N_Eggs, LarFood, AdNut, NoG, hatchability, Mc, sex_ratio, x5, SenDen, SenSize, LarFoodminus, AdNutminus):
    tseries = []
    egg_tseries = []
    eggsperfemale_tseries = []
    larvae_tseries = []
    MeanLarvaeSize_tseries = []
    MeanAdultSize_tseries = []
    ext=0
    for t in range(NoG):
        egg_tseries += [N_Eggs]
        fecj, N_larvae, MeanLarvaeSize, MeanAdultSize = Egg2Fecund(N_Eggs, LarFood, AdNut, hatchability, Mc, sex_ratio, x5, SenDen, SenSize)
        N_females = len([x for x in fecj if x != 0])
        larvae_tseries += [N_larvae]
        MeanLarvaeSize_tseries += [MeanLarvaeSize]
        MeanAdultSize_tseries += [MeanAdultSize]
        if N_females !=0:
            eggsperfemale_tseries += [N_Eggs/N_females]  # add if statement for N_females=0
        else:
            eggsperfemale_tseries += [0]
        if len(fecj) == 0 & ext == 0:
            ext = 1
        N_Eggs = sum([int(round(x)) for x in fecj if x != 0])
        tseries += [len(fecj)]
        LarFood, AdNut = food_decrease(LarFood, LarFoodminus, AdNut, AdNutminus)
    return [egg_tseries, tseries, ext, larvae_tseries, MeanLarvaeSize_tseries, MeanAdultSize_tseries, eggsperfemale_tseries]


# Replicating timeseries
def replicates(LarFood, AdNut, hatchability, Mc, sex_ratio, x5, SenDen, SenSize, NoG, NoR, N_Eggs_init, LarFoodminus, AdNutminus):
    all_egg = []
    all_adult = []
    all_larvae = []
    all_larvae_size = []
    all_adult_size = []
    all_eggperfemale = []
    N_Eggs = N_Eggs_init
    ext_count=0
    for rep in range(NoR):
        [N_egg, N_adult, ext, N_larvae, MeanLarvaeSize_tseries, MeanAdultSize_tseries, eggsperfemale_tseries]= timeseries(N_Eggs, LarFood, AdNut, NoG, hatchability, Mc, sex_ratio, x5, SenDen, SenSize, LarFoodminus, AdNutminus)
        all_egg += [N_egg]
        all_adult += [N_adult]
        all_larvae += [N_larvae]
        all_larvae_size += [MeanLarvaeSize_tseries]
        all_adult_size += [MeanAdultSize_tseries]
        all_eggperfemale += [eggsperfemale_tseries]
        ext_count += ext
    return (all_egg, all_adult, ext_count, all_larvae, all_larvae_size, all_adult_size, all_eggperfemale)

# Decreasing Larval and Adult food
def food_decrease(LarFood, LarFoodminus, AdNut, AdNutminus):
    if LarFood>LarFoodminus:
        LarFood = LarFood -LarFoodminus
    if AdNut>AdNutminus:
        AdNut = AdNut -AdNutminus
    return (LarFood, AdNut)

# Claculating fluctuation_index
def fluctuation_index(N_list):
	s1=0
	for i in range(1,len(N_list)):
		s1=s1+abs(float(N_list[i])-float(N_list[i-1]))
	s2=0
	for i in N_list:
		s2=s2+float(i)
	FI=s1/s2
	return FI


LarFood=1.6
LarFoodminus=0.001
AdNut=1
AdNutminus=0
hatchability=0.98
Mc=1.1
sex_ratio=0.5
x5=85
SenDen=0.17
SenSize=1.7
NoG=100
NoR=100
N_Eggs_init=30

all_egg, all_adult, ext_count, all_larvae, all_larvae_size, all_adult_size, all_eggperfemale = replicates(LarFood, AdNut, hatchability, Mc, sex_ratio, x5, SenDen, SenSize, NoG, NoR, N_Eggs_init, LarFoodminus, AdNutminus)

fig = plt.figure()

# Plot fecundity against time
for j in range(NoR):
    fig.add_subplot(321).plot(range(len(all_egg[j])), all_egg[j])
plt.title("fecundity_modified")

# Plot larvae_number against time
for j in range(NoR):
    fig.add_subplot(323).plot(range(len(all_larvae[j])), all_larvae[j])
plt.title("larvae number")

# Plot adult_number against time
for j in range(NoR):
    fig.add_subplot(325).plot(range(len(all_adult[j])), all_adult[j])
plt.title("adult number")

# Plot larvae_size against time
for j in range(NoR):
    fig.add_subplot(322).plot(range(len(all_larvae_size[j])), all_larvae_size[j])
plt.title("larvae size")

# Plot adult_size against time
for j in range(NoR):
    fig.add_subplot(324).plot(range(len(all_adult_size[j])), all_adult_size[j])
plt.title("adult size")

# Plot all_eggperfemale against time_axis
for j in range(NoR):
    fig.add_subplot(326).plot(range(len(all_eggperfemale[j])), all_eggperfemale[j])
plt.title("eggs per female")

plt.show()
plt.close()

g=15

# Calculating indices
def Indices(g, LarFood, AdNut, hatchability, Mc, sex_ratio, x5, SenDen, SenSize, NoG, NoR, N_Eggs_init, LarFoodminus, AdNutminus):
    all_egg, all_adult, ext_count, all_larvae, all_larvae_size, all_adult_size, all_eggperfemale = replicates(LarFood, AdNut, hatchability, Mc, sex_ratio, x5, SenDen, SenSize, NoG, NoR, N_Eggs_init, LarFoodminus, AdNutminus)
    FecundityIndex = []
    LarvaeNumberIndex = []
    AdultNumberIndex = []
    LarvaeSizeIndex = []
    AdultSizeIndex = []
    FecundityPerFemaleIndex = []
    fec_index = []
    num_larvae_index = []
    num_adult_index = []
    larvae_size_index = []
    adult_size_index = []
    fecundityperfemale_index = []
    all_adult = np.array(all_adult)
    for j in range(NoR):
        for i in range(g+1, len(all_adult[j])):
            if all_adult[j][i] == 0:
                fec_index = [(all_egg[j][k] -statistics.mean(all_egg[j][:k])) /np.std(all_egg[j][:k]) for k in range(i-g, i)]
                num_larvae_index = [(all_larvae[j][k] -statistics.mean(all_larvae[j][:k])) /np.std(all_larvae[j][:k]) for k in range(i-g, i)]
                num_adult_index = [(all_adult[j][k] -statistics.mean(all_adult[j][:k])) /np.std(all_adult[j][:k]) for k in range(i-g, i)]
                larvae_size_index = [(all_larvae_size[j][k] -statistics.mean(all_larvae_size[j][:k])) /np.std(all_larvae_size[j][:k]) for k in range(i-g, i)]
                adult_size_index = [(all_adult_size[j][k] -statistics.mean(all_adult_size[j][:k])) /np.std(all_adult_size[j][:k]) for k in range(i-g, i)]
                fecundityperfemale_index = [(all_eggperfemale[j][k] -statistics.mean(all_eggperfemale[j][:k])) /np.std(all_eggperfemale[j][:k]) for k in range(i-g, i)]
                break
        FecundityIndex += [fec_index]
        LarvaeNumberIndex += [num_larvae_index]
        AdultNumberIndex += [num_adult_index]
        LarvaeSizeIndex += [larvae_size_index]
        AdultSizeIndex += [adult_size_index]
        FecundityPerFemaleIndex += [fecundityperfemale_index]
    return(FecundityIndex, LarvaeNumberIndex, AdultNumberIndex, LarvaeSizeIndex, AdultSizeIndex, FecundityPerFemaleIndex)

FecundityIndex, LarvaeNumberIndex, AdultNumberIndex, LarvaeSizeIndex, AdultSizeIndex, FecundityPerFemaleIndex = Indices(g, LarFood, AdNut, hatchability, Mc, sex_ratio, x5, SenDen, SenSize, NoG, NoR, N_Eggs_init, LarFoodminus, AdNutminus)

fig = plt.figure()

# Plot FecundityIndex against time
for j in range(NoR):
    fig.add_subplot(321).plot(range(len(FecundityIndex[j])), FecundityIndex[j])
plt.title("FecundityIndex_modified")

# Plot LarvaeNumberIndex against time
for j in range(NoR):
    fig.add_subplot(323).plot(range(len(LarvaeNumberIndex[j])), LarvaeNumberIndex[j])
plt.title("LarvaeNumberIndex")

# Plot AdultNumberIndex against time
for j in range(NoR):
    fig.add_subplot(325).plot(range(len(AdultNumberIndex[j])), AdultNumberIndex[j])
plt.title("AdultNumberIndex")

# Plot LarvaeSizeIndex against time
for j in range(NoR):
    fig.add_subplot(322).plot(range(len(LarvaeSizeIndex[j])), LarvaeSizeIndex[j])
plt.title("LarvaeSizeIndex")

# Plot AdultSizeIndex against time
for j in range(NoR):
    fig.add_subplot(324).plot(range(len(AdultSizeIndex[j])), AdultSizeIndex[j])
plt.title("AdultSizeIndex")

# Plot all_eggperfemale against time_axis
for j in range(NoR):
    fig.add_subplot(326).plot(range(len(FecundityPerFemaleIndex[j])), FecundityPerFemaleIndex[j])
plt.title("FecundityPerFemaleIndex")

plt.show()
plt.close()

# Cross-checking code
print()
print("MODIFIED")
fluc = [fluctuation_index(all_adult[i]) for i in range(NoR)]
print("fluctuation_index of adults = ", statistics.mean(fluc[:]))
avg = [statistics.mean(all_adult[i][:]) for i in range(NoR)]
print("Avg population size of adults = ", statistics.mean(avg[:]))
extint = 0
for i in range(NoR):
    for j in range(len(all_adult[i])):
        if all_adult[i][j]==0:
            extint+=1
            break
ext_prob = extint/NoR
print("extinction probabiliy = ", ext_prob)
