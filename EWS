# EWS

import random as ran
import statistics
import matplotlib.pyplot as plt
import numpy as np
import xlwt
from xlwt import Workbook

# Main function
def Egg2Fecund(N_Eggs, LarFood, AdNut, hatchability, Mc, sex_ratio, x5, SenDen, SenSize):
    x1 = 4.2
    x2 = 1
    x3 = 0.009
    x41 = 1
    x42 = 1
    x6 = 2
    N_larvae = int(round(hatchability * N_Eggs))
    SD = 0.31
    fecundity = []
    if N_larvae != 0:
        MeanLarvaeSize = x1 *(1 -(1.0 /(x2 +np.exp(-x3 *N_larvae
                         /LarFood))))
    else:
        MeanLarvaeSize = 0
    larvae_size = np.random.normal(MeanLarvaeSize, SD, N_larvae)
    adult_size = [x42 * j for j in larvae_size if j > Mc]
    N_Adult = int(round(x41 * len(adult_size)))
    adult_size = ran.sample(adult_size, N_Adult)
    if adult_size == []:
        MeanAdultSize = 0
    else:
        MeanAdultSize = statistics.mean(adult_size)
    SizeDepFecundity = AdNut * x5 * np.log(x6 + SenSize * np.array(adult_size))
    DenDepFecundity = 1 / (1 + SenDen * N_Adult)
    fecundity = SizeDepFecundity * DenDepFecundity
    for k in range(N_Adult):
        if ran.random() < sex_ratio:
            fecundity[k] = -1
    NMales = len([x for x in fecundity if x == -1])
    fecundity = list(fecundity)
    return (fecundity, N_larvae, MeanLarvaeSize, MeanAdultSize)


# Generating timeseries
def timeseries(N_Eggs, LarFood, AdNut, NoG, hatchability, Mc, sex_ratio, x5, SenDen, SenSize, LarFoodminus, AdNutminus):
    tseries = []
    egg_tseries = []
    eggsperfemale_tseries = []
    larvae_tseries = []
    MeanLarvaeSize_tseries = []
    MeanAdultSize_tseries = []
    ext=0
    for t in range(NoG):
        egg_tseries += [N_Eggs]
        fecj, N_larvae, MeanLarvaeSize, MeanAdultSize = Egg2Fecund(N_Eggs, LarFood, AdNut, hatchability, Mc, sex_ratio, x5, SenDen, SenSize)
        N_females = len([x for x in fecj if x != -1])
        larvae_tseries += [N_larvae]
        MeanLarvaeSize_tseries += [MeanLarvaeSize]
        MeanAdultSize_tseries += [MeanAdultSize]
        if N_females !=0:
            eggsperfemale_tseries += [N_Eggs/N_females]  # add if statement for N_females=0
        else:
            eggsperfemale_tseries += [0]
        if len(fecj) == 0 & ext == 0:
            ext = 1
        N_Eggs = sum([int(round(x)) for x in fecj if x != -1])
        tseries += [len(fecj)]
        LarFood, AdNut = food_decrease(LarFood, LarFoodminus, AdNut, AdNutminus)
    return [egg_tseries, tseries, ext, larvae_tseries, MeanLarvaeSize_tseries, MeanAdultSize_tseries, eggsperfemale_tseries]


# Replicating timeseries
def replicates(LarFood, AdNut, hatchability, Mc, sex_ratio, x5, SenDen, SenSize, NoG, NoR, N_Eggs_init, LarFoodminus, AdNutminus):
    all_egg = []
    all_adult = []
    all_larvae = []
    all_larvae_size = []
    all_adult_size = []
    all_eggperfemale = []
    N_Eggs = N_Eggs_init
    ext_count=0
    for rep in range(NoR):
        [N_egg, N_adult, ext, N_larvae, MeanLarvaeSize_tseries, MeanAdultSize_tseries, eggsperfemale_tseries]= timeseries(N_Eggs, LarFood, AdNut, NoG, hatchability, Mc, sex_ratio, x5, SenDen, SenSize, LarFoodminus, AdNutminus)
        all_egg += [N_egg]
        all_adult += [N_adult]
        all_larvae += [N_larvae]
        all_larvae_size += [MeanLarvaeSize_tseries]
        all_adult_size += [MeanAdultSize_tseries]
        all_eggperfemale += [eggsperfemale_tseries]
        ext_count += ext
    return (all_egg, all_adult, ext_count, all_larvae, all_larvae_size, all_adult_size, all_eggperfemale)

# Decreasing Larval and Adult food
def food_decrease(LarFood, LarFoodminus, AdNut, AdNutminus):
    if LarFood>LarFoodminus:
        LarFood = LarFood -LarFoodminus
    if AdNut>AdNutminus:
        AdNut = AdNut -AdNutminus
    return (LarFood, AdNut)

# Claculating fluctuation_index for biological populations
def fluctuation_index(N_list):
	s1=0
	for i in range(1,len(N_list)):
		s1=s1+abs(float(N_list[i])-float(N_list[i-1]))
	s2=0
	for i in N_list:
		s2=s2+float(i)
	FI=s1/s2
	return FI

LarFood=1.6
LarFoodminus=0.001
AdNut=1
AdNutminus=0
hatchability=0.98
Mc=1.1
sex_ratio=0.5
x5=85
SenDen=0.17
SenSize=1.7
NoG=100
NoR=100 #previously 10
N_Eggs_init=30

all_egg, all_adult, ext_count, all_larvae, all_larvae_size, all_adult_size, all_eggperfemale = replicates(LarFood, AdNut, hatchability, Mc, sex_ratio, x5, SenDen, SenSize, NoG, NoR, N_Eggs_init, LarFoodminus, AdNutminus)

fig = plt.figure()

# Plot fecundity against time
for j in range(NoR):
    fig.add_subplot(321).plot(range(len(all_egg[j])), all_egg[j])
plt.title("fecundity")

# Plot larvae_number against time
for j in range(NoR):
    fig.add_subplot(323).plot(range(len(all_larvae[j])), all_larvae[j])
plt.title("larvae number")

# Plot adult_number against time
for j in range(NoR):
    fig.add_subplot(325).plot(range(len(all_adult[j])), all_adult[j])
plt.title("adult number")

# Plot larvae_size against time
for j in range(NoR):
    fig.add_subplot(322).plot(range(len(all_larvae_size[j])), all_larvae_size[j])
plt.title("larvae size")

# Plot adult_size against time
for j in range(NoR):
    fig.add_subplot(324).plot(range(len(all_adult_size[j])), all_adult_size[j])
plt.title("adult size")

# Plot all_eggperfemale against time_axis
for j in range(NoR):
    fig.add_subplot(326).plot(range(len(all_eggperfemale[j])), all_eggperfemale[j])
plt.title("eggs per female")

plt.tight_layout()
plt.savefig("PopulationSizeValues.pdf", dpi=300)
plt.show()
plt.close()

# writing PopulationSizeValues to xl
wb1 = Workbook()
sheet1 = wb1.add_sheet('Fecundity')
sheet2 = wb1.add_sheet('LarvaeNumber')
sheet3 = wb1.add_sheet('AdultNumber')
sheet4 = wb1.add_sheet('LarvaeSize')
sheet5 = wb1.add_sheet('AdultSize')
sheet6 = wb1.add_sheet('FecundityPerFemale')
for i in range(NoR):
    for j in range(NoG):
        sheet1.write(i, j, all_egg[i][j])
        sheet2.write(i, j, all_larvae[i][j])
        sheet3.write(i, j, all_adult[i][j])
        sheet4.write(i, j, all_larvae_size[i][j])
        sheet5.write(i, j, all_adult_size[i][j])
        sheet6.write(i, j, all_eggperfemale[i][j])
wb1.save('PopulationSizeValues.xls')

g=15

# Calculating indices
def Indices(g, LarFood, all_egg, all_adult, ext_count, all_larvae, all_larvae_size, all_adult_size, all_eggperfemale):
    #all_egg, all_adult, ext_count, all_larvae, all_larvae_size, all_adult_size, all_eggperfemale = replicates(LarFood, AdNut, hatchability, Mc, sex_ratio, x5, SenDen, SenSize, NoG, NoR, N_Eggs_init, LarFoodminus, AdNutminus)
    FecundityIndex = []
    LarvaeNumberIndex = []
    AdultNumberIndex = []
    LarvaeSizeIndex = []
    AdultSizeIndex = []
    FecundityPerFemaleIndex = []
    all_adult = np.array(all_adult)
    for j in range(NoR):
        fec_index = []
        num_larvae_index = []
        num_adult_index = []
        larvae_size_index = []
        adult_size_index = []
        fecundityperfemale_index = []
        for i in range(len(all_adult[j])):
            if all_adult[j][i] == 0:
                if i<15:  # To exclude replicates which die in first 15 generations
                    break
                else:
                    fec_index = [(all_egg[j][k] -statistics.mean(all_egg[j][:k])) /np.std(all_egg[j][:k]) for k in range(i-g, i)]
                    num_larvae_index = [(all_larvae[j][k] -statistics.mean(all_larvae[j][:k])) /np.std(all_larvae[j][:k]) for k in range(i-g, i)]
                    num_adult_index = [(all_adult[j][k] -statistics.mean(all_adult[j][:k])) /np.std(all_adult[j][:k]) for k in range(i-g, i)]
                    larvae_size_index = [(all_larvae_size[j][k] -statistics.mean(all_larvae_size[j][:k])) /np.std(all_larvae_size[j][:k]) for k in range(i-g, i)]
                    adult_size_index = [(all_adult_size[j][k] -statistics.mean(all_adult_size[j][:k])) /np.std(all_adult_size[j][:k]) for k in range(i-g, i)]
                    fecundityperfemale_index = [(all_eggperfemale[j][k] -statistics.mean(all_eggperfemale[j][:k])) /np.std(all_eggperfemale[j][:k]) for k in range(i-g, i)]
                    break
        FecundityIndex += [fec_index]
        LarvaeNumberIndex += [num_larvae_index]
        AdultNumberIndex += [num_adult_index]
        LarvaeSizeIndex += [larvae_size_index]
        AdultSizeIndex += [adult_size_index]
        FecundityPerFemaleIndex += [fecundityperfemale_index]
    return(FecundityIndex, LarvaeNumberIndex, AdultNumberIndex, LarvaeSizeIndex, AdultSizeIndex, FecundityPerFemaleIndex)

FecundityIndex, LarvaeNumberIndex, AdultNumberIndex, LarvaeSizeIndex, AdultSizeIndex, FecundityPerFemaleIndex = Indices(g, LarFood, all_egg, all_adult, ext_count, all_larvae, all_larvae_size, all_adult_size, all_eggperfemale)

print(FecundityIndex)

# For boxplot
FecundityIndexbox = []
LarvaeNumberIndexbox = []
AdultNumberIndexbox = []
LarvaeSizeIndexbox = []
AdultSizeIndexbox = []
FecundityPerFemaleIndexbox = []

for j in range(g):
    FecundityIndexB = []
    LarvaeNumberIndexB = []
    AdultNumberIndexB = []
    LarvaeSizeIndexB = []
    AdultSizeIndexB = []
    FecundityPerFemaleIndexB = []
    for i in range(len(FecundityIndex)):
        if FecundityIndex[i] != []:
            FecundityIndexB.append(FecundityIndex[i][j])
        if LarvaeNumberIndex[i] != []:
            LarvaeNumberIndexB.append(LarvaeNumberIndex[i][j])
        if AdultNumberIndex[i] != []:
            AdultNumberIndexB.append(AdultNumberIndex[i][j])
        if LarvaeSizeIndex[i] != []:
            LarvaeSizeIndexB.append(LarvaeSizeIndex[i][j])
        if AdultSizeIndex[i] != []:
            AdultSizeIndexB.append(AdultSizeIndex[i][j])
        if FecundityPerFemaleIndex[i] != []:
            FecundityPerFemaleIndexB.append(FecundityPerFemaleIndex[i][j])
    FecundityIndexbox += [FecundityIndexB]
    LarvaeNumberIndexbox += [LarvaeNumberIndexB]
    AdultNumberIndexbox += [AdultNumberIndexB]
    LarvaeSizeIndexbox += [LarvaeSizeIndexB]
    AdultSizeIndexbox += [AdultSizeIndexB]
    FecundityPerFemaleIndexbox += [FecundityPerFemaleIndexB]

# writing Indices to xl
wb = Workbook()
sheet1 = wb.add_sheet('FecundityIndex')
sheet2 = wb.add_sheet('LarvaeNumberIndex')
sheet3 = wb.add_sheet('AdultNumberIndex')
sheet4 = wb.add_sheet('LarvaeSizeIndexbox')
sheet5 = wb.add_sheet('AdultSizeIndex')
sheet6 = wb.add_sheet('FecundityPerFemaleIndex')
for i in range(g):
    for j in range(len(FecundityIndexbox[0])):
        sheet1.write(j, i, FecundityIndexbox[i][j])
        sheet2.write(j, i, LarvaeNumberIndexbox[i][j])
        sheet3.write(j, i, AdultNumberIndexbox[i][j])
        sheet4.write(j, i, LarvaeSizeIndexbox[i][j])
        sheet5.write(j, i, AdultSizeIndexbox[i][j])
        sheet6.write(j, i, FecundityPerFemaleIndexbox[i][j])
wb.save('Indices.xls')

# fig = plt.figure()  # For scatterplot of indices
#
# # Plot FecundityIndex against time
# for j in range(NoR):
#     fig.add_subplot(321).plot(range(len(FecundityIndexbox[j])), FecundityIndexbox[j])
# plt.title("FecundityIndex")
#
# # Plot LarvaeNumberIndex against time
# for j in range(NoR):
#     fig.add_subplot(323).plot(range(len(LarvaeNumberIndexbox[j])), LarvaeNumberIndexbox[j])
# plt.title("LarvaeNumberIndex")
#
# # Plot AdultNumberIndex against time
# for j in range(NoR):
#     fig.add_subplot(325).plot(range(len(AdultNumberIndexbox[j])), AdultNumberIndexbox[j])
# plt.title("AdultNumberIndex")
#
# # Plot LarvaeSizeIndex against time
# for j in range(NoR):
#     fig.add_subplot(322).plot(range(len(LarvaeSizeIndexbox[j])), LarvaeSizeIndexbox[j])
# plt.title("LarvaeSizeIndex")
#
# # Plot AdultSizeIndex against time
# for j in range(NoR):
#     fig.add_subplot(324).plot(range(len(AdultSizeIndexbox[j])), AdultSizeIndexbox[j])
# plt.title("AdultSizeIndex")
#
# # Plot all_eggperfemale against time_axis
# for j in range(NoR):
#     fig.add_subplot(326).plot(range(len(FecundityPerFemaleIndexbox[j])), FecundityPerFemaleIndexbox[j])
# plt.title("FecundityPerFemaleIndex")
#
# plt.show()
# plt.close()

fig = plt.figure()

# Plot FecundityIndex against time
for j in range(NoR):
    fig.add_subplot(321).boxplot(FecundityIndexbox)
plt.title("FecundityIndex")

# Plot LarvaeNumberIndex against time
for j in range(NoR):
    fig.add_subplot(323).boxplot(LarvaeNumberIndexbox)
plt.title("LarvaeNumberIndex")

# Plot AdultNumberIndex against time
for j in range(NoR):
    fig.add_subplot(325).boxplot(AdultNumberIndexbox)
plt.title("AdultNumberIndex")

# Plot LarvaeSizeIndex against time
for j in range(NoR):
    fig.add_subplot(322).boxplot(LarvaeSizeIndexbox)
plt.title("LarvaeSizeIndex")

# Plot AdultSizeIndex against time
for j in range(NoR):
    fig.add_subplot(324).boxplot(AdultSizeIndexbox)
plt.title("AdultSizeIndex")

# Plot all_eggperfemale against time_axis
for j in range(NoR):
    fig.add_subplot(326).boxplot(FecundityPerFemaleIndexbox)
plt.title("FecundityPerFemaleIndex")

plt.tight_layout()
plt.savefig("Indices.pdf", dpi=300)
plt.show()
plt.close()

# Cross-checking code
print()
print()
fluc = [fluctuation_index(all_adult[i]) for i in range(NoR)]
print("fluctuation_index of adults = ", statistics.mean(fluc[:]))
avg = [statistics.mean(all_adult[i][:]) for i in range(NoR)]
print("Avg population size of adults = ", statistics.mean(avg[:]))
extint = 0
for i in range(NoR):
    for j in range(len(all_adult[i])):
        if all_adult[i][j]==0:
            extint+=1
            break
ext_prob = extint/NoR
print("extinction probabiliy = ", ext_prob)
